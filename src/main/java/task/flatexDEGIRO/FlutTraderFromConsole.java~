package task.flatexDEGIRO;

import java.util.*;

public class FlutTraderFromConsole {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int caseNumber = 1;

        while (true) {
            int Z = sc.nextInt(); // Number of schuurs in this test case
            if (Z == 0) break; // End of input

            // Initialize map to combine all schuurs
            TreeMap<Integer, TreeSet<Integer>> combinedResults = new TreeMap<>(); // Profit -> Flut counts

            for (int i = 0; i < Z; i++) {
                int E = sc.nextInt(); // Number of fluts in this schuur
                int[] prices = new int[E];
                for (int j = 0; j < E; j++) {
                    prices[j] = sc.nextInt();
                }

                List<int[]> schuurResults = new ArrayList<>();
                int profit = 0;
                for (int j = 0; j < E; j++) {
                    int currentProfit = 10 - prices[j];
                    profit += currentProfit;
                    schuurResults.add(new int[]{profit, j + 1});
                }

                // Combine this schuur's results with overall results
                TreeMap<Integer, TreeSet<Integer>> newCombinedResults = new TreeMap<>();
                for (Map.Entry<Integer, TreeSet<Integer>> entry : combinedResults.entrySet()) {
                    int totalProfit = entry.getKey();
                    TreeSet<Integer> totalFluts = entry.getValue();

                    for (int[] schuurResult : schuurResults) {
                        int combinedProfit = totalProfit + schuurResult[0];
                        int combinedFluts = totalFluts.first() + schuurResult[1];

                        // Update new combined results
                        newCombinedResults.putIfAbsent(combinedProfit, new TreeSet<>());
                        newCombinedResults.get(combinedProfit).add(combinedFluts);
                    }
                }

                // Add this schuur's results individually
                for (int[] schuurResult : schuurResults) {
                    int profitKey = schuurResult[0];
                    int flutCountValue = schuurResult[1];
                    newCombinedResults.putIfAbsent(profitKey, new TreeSet<>());
                    newCombinedResults.get(profitKey).add(flutCountValue);
                }

                // Update combined results
                combinedResults = newCombinedResults;
            }

            // Find maximum profit and its corresponding flut counts
            int maxProfit = combinedResults.lastKey();
            TreeSet<Integer> flutCounts = combinedResults.get(maxProfit);

            // Print results for this test case
            System.out.println("Schuurs " + caseNumber);
            System.out.println("Maximum profit is " + maxProfit + ".");

            System.out.print("Number of fluts to buy: ");
            int count = 0;
            for (int flutCount : flutCounts) {
                System.out.print(flutCount);
                count++;
                if (count == 10) break; // Limit to 10 smallest values
                System.out.print(" ");
            }
            System.out.println("\n");
            caseNumber++;
        }
    }
}
